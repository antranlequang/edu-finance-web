'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { EvaluateEduscoreSurveyOutput } from '@/ai/flows/evaluate-eduscore-survey';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth-neon';
import { saveEduscoreResult } from '@/lib/database';

import { Progress } from '@/components/ui/progress';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Loader2 } from 'lucide-react';
import SurveyResult from './SurveyResult';

const formSchema = z.object({
  academicInfoGPA: z.coerce.number().min(0, "ƒêi·ªÉm trung b√¨nh (GPA) ph·∫£i t·ª´ 0 tr·ªü l√™n.").max(4, "ƒêi·ªÉm trung b√¨nh (GPA) kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 4.0."),
  major: z.string({ required_error: "Vui l√≤ng ch·ªçn chuy√™n ng√†nh/lƒ©nh v·ª±c h·ªçc t·∫≠p c·ªßa b·∫°n." }),
  majorOther: z.string().optional(),
  technicalSkills: z.string().min(1, "Vui l√≤ng li·ªát k√™ c√°c k·ªπ nƒÉng chuy√™n m√¥n c·ªßa b·∫°n."),
  programmingLanguages: z.string().optional(),
  certifications: z.string().optional(),
  currentYear: z.string({ required_error: "Vui l√≤ng ch·ªçn nƒÉm h·ªçc hi·ªán t·∫°i c·ªßa b·∫°n." }),
  university: z.string().min(1, "Vui l√≤ng nh·∫≠p t√™n tr∆∞·ªùng ƒë·∫°i h·ªçc/h·ªçc vi·ªán c·ªßa b·∫°n."),
  extracurricularActivities: z.string().optional(),
  awards: z.string().optional(),
  languageSkills: z.string().optional(),
  workExperience: z.string().optional(),
  familyIncome: z.string({ required_error: "Vui l√≤ng ch·ªçn ph·∫°m vi thu nh·∫≠p." }),
  dependents: z.coerce.number().min(0, "S·ªë l∆∞·ª£ng ng∆∞·ªùi ph·ª• thu·ªôc kh√¥ng ƒë∆∞·ª£c √¢m."),
  valuableAssets: z.string().optional(),
  medicalExpenses: z.string().optional(),
  specialCircumstances: z.string().optional(),
  aspirations: z.string().optional(),
  careerGoals: z.string().optional(),
});

type SurveyFormValues = z.infer<typeof formSchema>;

const steps = [
  { id: 1, title: 'Th√¥ng tin c∆° b·∫£n', fields: ['academicInfoGPA', 'major', 'majorOther', 'currentYear', 'university'] },
  { id: 2, title: 'K·ªπ nƒÉng & Kinh nghi·ªám', fields: ['technicalSkills', 'programmingLanguages', 'certifications', 'languageSkills', 'workExperience'] },
  { id: 3, title: 'Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a & Gi·∫£i th∆∞·ªüng', fields: ['extracurricularActivities', 'awards'] },
  { id: 4, title: 'Th√¥ng tin t√†i ch√≠nh', fields: ['familyIncome', 'dependents', 'valuableAssets'] },
  { id: 5, title: 'Ho√†n c·∫£nh ƒë·∫∑c bi·ªát', fields: ['medicalExpenses', 'specialCircumstances'] },
  { id: 6, title: 'Nguy·ªán v·ªçng', fields: ['aspirations', 'careerGoals'] },
];

export default function SurveyWizard() {
  const [currentStep, setCurrentStep] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<EvaluateEduscoreSurveyOutput | null>(null);
  const { toast } = useToast();
  const { user } = useAuth();


  const form = useForm<SurveyFormValues>({
    resolver: zodResolver(formSchema),
    mode: 'onChange',
    defaultValues: {
      academicInfoGPA: 0,
      major: '',
      majorOther: '',
      technicalSkills: '',
      programmingLanguages: '',
      certifications: '',
      currentYear: '',
      university: '',
      extracurricularActivities: '',
      awards: '',
      languageSkills: '',
      workExperience: '',
      familyIncome: '',
      dependents: 0,
      valuableAssets: '',
      medicalExpenses: '',
      specialCircumstances: '',
      aspirations: '',
      careerGoals: '',
    }
  });

  const handleNext = async () => {
    const fields = steps[currentStep].fields as (keyof SurveyFormValues)[];
    
    // Validate all fields
    const output = await form.trigger(fields, { shouldFocus: true });
    if (!output) return;

    if (currentStep < steps.length - 1) {
      setCurrentStep(step => step + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(step => step - 1);
    }
  };

  // Fast local evaluation function - instant scoring
  const evaluateEduscoreFast = (surveyData: SurveyFormValues): EvaluateEduscoreSurveyOutput => {
    let score = 0;
    let reasoning = "Ph√¢n t√≠ch EduScore c·ªßa b·∫°n:\n\n";
    
    // Academic Performance (40 points max)
    const gpaScore = (surveyData.academicInfoGPA / 4.0) * 40;
    score += gpaScore;
    reasoning += `üìö **Th√†nh t√≠ch h·ªçc t·∫≠p (${gpaScore.toFixed(1)}/40 ƒëi·ªÉm):**\n`;
    reasoning += `- GPA ${surveyData.academicInfoGPA}/4.0 `;
    if (surveyData.academicInfoGPA >= 3.5) {
      reasoning += "- Xu·∫•t s·∫Øc!\n";
    } else if (surveyData.academicInfoGPA >= 3.0) {
      reasoning += "- Kh√° t·ªët\n";
    } else {
      reasoning += "- C·∫ßn c·∫£i thi·ªán\n";
    }
    reasoning += `- Chuy√™n ng√†nh: ${surveyData.major}\n`;
    reasoning += `- Tr∆∞·ªùng: ${surveyData.university}\n\n`;
    
    // Skills & Experience (25 points max)
    let skillsScore = 0;
    if (surveyData.technicalSkills.length > 20) skillsScore += 8;
    else if (surveyData.technicalSkills.length > 10) skillsScore += 5;
    else skillsScore += 2;
    
    if (surveyData.programmingLanguages && surveyData.programmingLanguages.length > 0) skillsScore += 5;
    if (surveyData.certifications && surveyData.certifications.length > 0) skillsScore += 5;
    if (surveyData.languageSkills && surveyData.languageSkills.length > 0) skillsScore += 4;
    if (surveyData.workExperience && surveyData.workExperience.length > 0) skillsScore += 3;
    
    skillsScore = Math.min(skillsScore, 25);
    score += skillsScore;
    reasoning += `üîß **K·ªπ nƒÉng & Kinh nghi·ªám (${skillsScore}/25 ƒëi·ªÉm):**\n`;
    reasoning += `- K·ªπ nƒÉng chuy√™n m√¥n: ${surveyData.technicalSkills.substring(0, 50)}...\n`;
    if (surveyData.programmingLanguages) reasoning += `- Ng√¥n ng·ªØ l·∫≠p tr√¨nh: ${surveyData.programmingLanguages}\n`;
    if (surveyData.workExperience) reasoning += `- Kinh nghi·ªám l√†m vi·ªác c√≥\n`;
    reasoning += "\n";
    
    // Extracurricular & Awards (20 points max)
    let extraScore = 0;
    if (surveyData.extracurricularActivities && surveyData.extracurricularActivities.length > 0) extraScore += 10;
    if (surveyData.awards && surveyData.awards.length > 0) extraScore += 10;
    
    score += extraScore;
    reasoning += `üåü **Ho·∫°t ƒë·ªông & Th√†nh t√≠ch (${extraScore}/20 ƒëi·ªÉm):**\n`;
    if (surveyData.extracurricularActivities) reasoning += `- Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a: C√≥\n`;
    if (surveyData.awards) reasoning += `- Gi·∫£i th∆∞·ªüng: C√≥\n`;
    if (extraScore === 0) reasoning += "- Ch∆∞a c√≥ ho·∫°t ƒë·ªông ngo·∫°i kh√≥a ƒë√°ng k·ªÉ\n";
    reasoning += "\n";
    
    // Financial Need & Aspirations (15 points max)
    let needScore = 0;
    if (surveyData.familyIncome.includes('5-10') || surveyData.familyIncome.includes('10-15')) needScore += 8;
    else if (surveyData.familyIncome.includes('15-25')) needScore += 5;
    else needScore += 3;
    
    if (surveyData.dependents >= 2) needScore += 3;
    if (surveyData.aspirations && surveyData.aspirations.length > 50) needScore += 2;
    if (surveyData.careerGoals && surveyData.careerGoals.length > 30) needScore += 2;
    
    score += needScore;
    reasoning += `üí∞ **Nhu c·∫ßu t√†i ch√≠nh & Nguy·ªán v·ªçng (${needScore}/15 ƒëi·ªÉm):**\n`;
    reasoning += `- Thu nh·∫≠p gia ƒë√¨nh: ${surveyData.familyIncome}\n`;
    reasoning += `- S·ªë ng∆∞·ªùi ph·ª• thu·ªôc: ${surveyData.dependents}\n`;
    if (surveyData.aspirations) reasoning += "- C√≥ nguy·ªán v·ªçng r√µ r√†ng\n";
    reasoning += "\n";
    
    // Final score adjustment
    score = Math.min(Math.max(score, 30), 100);
    
    reasoning += `üìä **T·ªïng k·∫øt:**\n`;
    reasoning += `- **EduScore: ${Math.round(score)}/100**\n`;
    if (score >= 85) {
      reasoning += "- H·ªì s∆° xu·∫•t s·∫Øc! B·∫°n c√≥ c∆° h·ªôi cao v·ªõi c√°c h·ªçc b·ªïng danh gi√°.\n";
    } else if (score >= 75) {
      reasoning += "- H·ªì s∆° t·ªët! B·∫°n ƒë·ªß ƒëi·ªÅu ki·ªán cho nhi·ªÅu h·ªçc b·ªïng.\n";
    } else if (score >= 65) {
      reasoning += "- H·ªì s∆° kh√° ·ªïn. N√™n c·∫£i thi·ªán th√™m ƒë·ªÉ tƒÉng c∆° h·ªôi.\n";
    } else {
      reasoning += "- H·ªì s∆° c·∫ßn c·∫£i thi·ªán ƒë√°ng k·ªÉ ƒë·ªÉ tƒÉng c∆° h·ªôi h·ªçc b·ªïng.\n";
    }
    
    reasoning += "\n‚ú® **L·ªùi khuy√™n:** Ti·∫øp t·ª•c ph√°t tri·ªÉn k·ªπ nƒÉng, tham gia ho·∫°t ƒë·ªông ngo·∫°i kh√≥a v√† duy tr√¨ th√†nh t√≠ch h·ªçc t·∫≠p t·ªët!";
    
    return {
      eduscore: Math.round(score),
      reasoning: reasoning
    };
  };

  const onSubmit = async (data: SurveyFormValues) => {
    if (!user) {
      toast({ variant: 'destructive', title: "Error", description: "You must be logged in to submit the survey." });
      return;
    }
    
    setIsLoading(true);
    try {
      let surveyResult;
      
      // Use fast local evaluation for instant results
      surveyResult = evaluateEduscoreFast(data);
      
      // Save to database
      await saveEduscoreResult(user.email, {
        userId: user.email,
        score: surveyResult.eduscore,
        reasoning: surveyResult.reasoning,
        surveyData: {
          academicInfoGPA: data.academicInfoGPA || 0,
          major: data.major || '',
          majorSpecialization: data.majorOther,
          technicalSkills: data.technicalSkills || '',
          programmingLanguages: data.programmingLanguages,
          certifications: data.certifications,
          languageSkills: data.languageSkills,
          workExperience: data.workExperience,
          currentYear: data.currentYear || '',
          university: data.university || '',
          extracurricularActivities: data.extracurricularActivities,
          awards: data.awards,
          familyIncome: data.familyIncome || '',
          dependents: data.dependents || 0,
          valuableAssets: data.valuableAssets,
          medicalExpenses: data.medicalExpenses,
          specialCircumstances: data.specialCircumstances,
          aspirations: data.aspirations,
          careerGoals: data.careerGoals,
        },
        documentUrls: {
          transcript: null,
          recommendationLetter: null
        }
      });
      
      // Store result and survey data in localStorage for immediate use
      localStorage.setItem('eduscoreResult', JSON.stringify(surveyResult));
      localStorage.setItem('surveyData', JSON.stringify(data));

      setResult(surveyResult);
      toast({ title: "ƒê√°nh gi√° ho√†n t·∫•t!", description: "ƒê√°nh gi√° Eduscore ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n xong v√† l∆∞u tr√™n h·ªá th·ªëng." });
    } catch (error) {
      console.error(error);
      toast({ variant: 'destructive', title: "ƒê√£ x·∫£y ra l·ªói", description: "Kh√¥ng th·ªÉ ƒë√°nh gi√° kh·∫£o s√°t. Vui l√≤ng th·ª≠ l·∫°i." });
    } finally {
      setIsLoading(false);
    }
  };
  
  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center text-center py-20">
        <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
        <h2 className="text-2xl font-semibold">ƒêang ƒë√°nh gi√° h·ªì s∆° c·ªßa b·∫°n...</h2>
        <p className="text-muted-foreground mt-2">H·ªá th·ªëng ƒëang ph√¢n t√≠ch ph·∫£n h·ªìi c·ªßa b·∫°n. Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian.</p>
      </div>
    );
  }

  if (result) {
    return <SurveyResult result={result} />;
  }

  return (
    <Card className="w-full max-w-3xl mx-auto">
      <CardHeader>
        <div className="mb-4 flex justify-between items-center">
          <div>
            <p className="text-sm text-muted-foreground">Trang {currentStep + 1} / {steps.length}</p>
            <Progress value={((currentStep + 1) / steps.length) * 100} className="mt-2" />
          </div>
        </div>
        <CardTitle className="text-2xl">{steps[currentStep].title}</CardTitle>
        <CardDescription>H√£y cung c·∫•p ch√≠nh x√°c c√°c th√¥ng tin d∆∞·ªõi ƒë√¢y</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-6">
            {currentStep === 0 && (
              <>
                <FormField control={form.control} name="academicInfoGPA" render={({ field }) => (
                  <FormItem>
                    <FormLabel>GPA (Thang ƒëi·ªÉm 4)</FormLabel>
                    <FormControl><Input type="number" step="0.01" placeholder="vd: 3.8" {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="major" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Chuy√™n ng√†nh/Lƒ©nh v·ª±c h·ªçc t·∫≠p c·ªßa b·∫°n?</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Nh·∫≠p ng√†nh b·∫°n ƒëang h·ªçc" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Computer Science">Khoa h·ªçc m√°y t√≠nh (Computer Science)</SelectItem>
                        <SelectItem value="Software Engineering">K·ªπ thu·∫≠t ph·∫ßn m·ªÅm (Software Engineering)</SelectItem>
                        <SelectItem value="Information Technology">C√¥ng ngh·ªá th√¥ng tin (Information Technology)</SelectItem>
                        <SelectItem value="Data Science">Khoa h·ªçc d·ªØ li·ªáu (Data Science)</SelectItem>
                        <SelectItem value="Civil Engineering">K·ªπ thu·∫≠t x√¢y d·ª±ng (Civil Engineering)</SelectItem>
                        <SelectItem value="Mechanical Engineering">K·ªπ thu·∫≠t c∆° kh√≠ (Mechanical Engineering)</SelectItem>
                        <SelectItem value="Electrical Engineering">K·ªπ thu·∫≠t ƒëi·ªán (Electrical Engineering)</SelectItem>
                        <SelectItem value="Chemical Engineering">K·ªπ thu·∫≠t h√≥a h·ªçc (Chemical Engineering)</SelectItem>
                        <SelectItem value="Business Administration">Qu·∫£n tr·ªã kinh doanh (Business Administration)</SelectItem>
                        <SelectItem value="Economics">Kinh t·∫ø h·ªçc (Economics)</SelectItem>
                        <SelectItem value="Finance Banking">T√†i ch√≠nh ng√¢n h√†ng (Finance & Banking)</SelectItem>
                        <SelectItem value="International Business">Kinh doanh qu·ªëc t·∫ø (International Business)</SelectItem>
                        <SelectItem value="Marketing">Ti·∫øp th·ªã (Marketing)</SelectItem>
                        <SelectItem value="Accounting">K·∫ø to√°n (Accounting)</SelectItem>
                        <SelectItem value="Medicine">Y khoa (Medicine)</SelectItem>
                        <SelectItem value="Pharmacy">D∆∞·ª£c h·ªçc (Pharmacy)</SelectItem>
                        <SelectItem value="Nursing">ƒêi·ªÅu d∆∞·ª°ng (Nursing)</SelectItem>
                        <SelectItem value="Dentistry">Nha khoa (Dentistry)</SelectItem>
                        <SelectItem value="Law">Lu·∫≠t h·ªçc (Law)</SelectItem>
                        <SelectItem value="International Relations">Quan h·ªá qu·ªëc t·∫ø (International Relations)</SelectItem>
                        <SelectItem value="Public Administration">H√†nh ch√≠nh c√¥ng (Public Administration)</SelectItem>
                        <SelectItem value="Education">S∆∞ ph·∫°m (Education)</SelectItem>
                        <SelectItem value="English Language">Ng√¥n ng·ªØ Anh (English Language)</SelectItem>
                        <SelectItem value="Japanese Language">Ng√¥n ng·ªØ Nh·∫≠t (Japanese Language)</SelectItem>
                        <SelectItem value="Chinese Language">Ng√¥n ng·ªØ Trung (Chinese Language)</SelectItem>
                        <SelectItem value="Vietnamese Literature">Ng·ªØ vƒÉn Vi·ªát Nam (Vietnamese Literature)</SelectItem>
                        <SelectItem value="Psychology">T√¢m l√Ω h·ªçc (Psychology)</SelectItem>
                        <SelectItem value="Sociology">X√£ h·ªôi h·ªçc (Sociology)</SelectItem>
                        <SelectItem value="History">L·ªãch s·ª≠ (History)</SelectItem>
                        <SelectItem value="Geography">ƒê·ªãa l√Ω (Geography)</SelectItem>
                        <SelectItem value="Mathematics">To√°n h·ªçc (Mathematics)</SelectItem>
                        <SelectItem value="Physics">V·∫≠t l√Ω (Physics)</SelectItem>
                        <SelectItem value="Chemistry">H√≥a h·ªçc (Chemistry)</SelectItem>
                        <SelectItem value="Biology">Sinh h·ªçc (Biology)</SelectItem>
                        <SelectItem value="Environmental Science">Khoa h·ªçc m√¥i tr∆∞·ªùng (Environmental Science)</SelectItem>
                        <SelectItem value="Architecture">Ki·∫øn tr√∫c (Architecture)</SelectItem>
                        <SelectItem value="Art Design">M·ªπ thu·∫≠t & Thi·∫øt k·∫ø (Art & Design)</SelectItem>
                        <SelectItem value="Music">√Çm nh·∫°c (Music)</SelectItem>
                        <SelectItem value="Film Studies">ƒêi·ªán ·∫£nh (Film Studies)</SelectItem>
                        <SelectItem value="Journalism">B√°o ch√≠ (Journalism)</SelectItem>
                        <SelectItem value="Communication">Truy·ªÅn th√¥ng (Communication)</SelectItem>
                        <SelectItem value="Tourism Hospitality">Du l·ªãch & Kh√°ch s·∫°n (Tourism & Hospitality)</SelectItem>
                        <SelectItem value="Agriculture">N√¥ng nghi·ªáp (Agriculture)</SelectItem>
                        <SelectItem value="Veterinary">Th√∫ y (Veterinary)</SelectItem>
                        <SelectItem value="Food Technology">C√¥ng ngh·ªá th·ª±c ph·∫©m (Food Technology)</SelectItem>
                        <SelectItem value="Transportation">Giao th√¥ng v·∫≠n t·∫£i (Transportation)</SelectItem>
                        <SelectItem value="Other">Kh√°c (Other)</SelectItem>
                      </SelectContent>
                    </Select>
                    
                    {field.value === "Other" && (
                      <FormField control={form.control} name="majorOther" render={({ field: otherField }) => (
                        <FormItem className="mt-2">
                          <FormLabel>H√£y nh·∫≠p chuy√™n ng√†nh c·ªßa b·∫°n</FormLabel>
                          <FormControl><Input placeholder="Nh·∫≠p chuy√™n ng√†nh c·ªßa b·∫°n" {...otherField} /></FormControl>
                          <FormMessage />
                        </FormItem>
                      )} />
                    )}

                    <FormMessage />
                  </FormItem>
                )} />

                <FormField control={form.control} name="currentYear" render={({ field }) => (
                  <FormItem>
                    <FormLabel>B·∫°n l√† sinh vi√™n nƒÉm m·∫•y?</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Ch·ªçn nƒÉm hi·ªán t·∫°i" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="1st Year">NƒÉm nh·∫•t</SelectItem>
                        <SelectItem value="2nd Year">NƒÉm hai</SelectItem>
                        <SelectItem value="3rd Year">NƒÉm ba</SelectItem>
                        <SelectItem value="4th Year">NƒÉm t∆∞</SelectItem>
                        <SelectItem value="Graduate">ƒê√£ t·ªët nghi·ªáp</SelectItem>
                        <SelectItem value="Recent Graduate">V·ª´a t·ªët nghi·ªáp</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="university" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tr∆∞·ªùng ƒë·∫°i h·ªçc/Cao ƒë·∫≥ng</FormLabel>
                    <FormControl><Input placeholder="vd: ƒê·∫°i h·ªçc Kinh t·∫ø - Lu·∫≠t" {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
              </>
            )}
            {currentStep === 1 && (
              <>
                <FormField control={form.control} name="technicalSkills" render={({ field }) => (
                  <FormItem>
                    <FormLabel>K·ªπ nƒÉng chuy√™n m√¥n (kh√¥ng c√≥ th√¨ ghi "Kh√¥ng")</FormLabel>
                    <FormControl><Textarea placeholder="vd: Python, React, Photoshop, Microsoft Office, AutoCAD..." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="programmingLanguages" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ng√¥n ng·ªØ l·∫≠p tr√¨nh (kh√¥ng c√≥ th√¨ ghi "Kh√¥ng")</FormLabel>
                    <FormControl><Input placeholder="vd: Java, Python, C++, JavaScript, PHP..." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="certifications" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ch·ª©ng ch·ªâ & Gi·∫•y ph√©p <span className="text-sm text-muted-foreground">(Kh√¥ng b·∫Øt bu·ªôc)</span></FormLabel>
                    <FormControl><Textarea placeholder="vd: AWS Certified, Google Analytics, TOEIC, IELTS. ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="languageSkills" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ch·ª©ng ch·ªâ ngo·∫°i ng·ªØ <span className="text-sm text-muted-foreground">(Kh√¥ng b·∫Øt bu·ªôc)</span></FormLabel>
                    <FormControl><Textarea placeholder="vd: TOEIC 850, IELTS 7.0, HSK Level 4. ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="workExperience" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Kinh nghi·ªám l√†m vi·ªác <span className="text-sm text-muted-foreground">(Kh√¥ng b·∫Øt bu·ªôc)</span></FormLabel>
                    <FormControl><Textarea placeholder="M√¥ t·∫£ th·ª±c t·∫≠p, c√¥ng vi·ªác b√°n th·ªùi gian, volunteer work. ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
              </>
            )}
            {currentStep === 2 && (
              <>
                <FormField control={form.control} name="extracurricularActivities" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a</FormLabel>
                    <FormControl><Textarea placeholder="vd: Tham gia ƒêo√†n - H·ªôi, t√¨nh nguy·ªán t·∫°i ƒë·ªãa ph∆∞∆°ng/tr∆∞·ªùng, C√¢u l·∫°c b·ªô/ƒê·ªôi/Nh√≥m,..." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="awards" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gi·∫£i th∆∞·ªüng & Th√†nh t√≠ch <span className="text-sm text-muted-foreground">(Kh√¥ng b·∫Øt bu·ªôc)</span></FormLabel>
                    <FormControl><Textarea placeholder="vd: Gi·∫£i nh·∫•t cu·ªôc thi khoa h·ªçc, ƒë·ªôi tr∆∞·ªüng ƒë·ªôi tranh bi·ªán. ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
              </>
            )}
            {currentStep === 3 && (
              <>
                <FormField control={form.control} name="familyIncome" render={({ field }) => (
                  <FormItem>
                    <FormLabel>T·ªïng thu nh·∫≠p h√†ng n c·ªßa gia ƒë√¨nh</FormLabel>
                    <FormControl>
                        <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="grid grid-cols-2 gap-4">
                            <FormItem className="flex items-center space-x-3 space-y-0">
                                <FormControl><RadioGroupItem value="< $1,000" /></FormControl>
                                <FormLabel className="font-normal">&lt; 30 tri·ªáu VND/nƒÉm</FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                                <FormControl><RadioGroupItem value="$1,000 - $2,500" /></FormControl>
                                <FormLabel className="font-normal">30 tri·ªáu ƒë·∫øn 118 tri·ªáu VND/nƒÉm</FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                                <FormControl><RadioGroupItem value="$2,501 - $5,000" /></FormControl>
                                <FormLabel className="font-normal">118 tri·ªáu ƒë·∫øn 367 tri·ªáu VND/nƒÉm</FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                                <FormControl><RadioGroupItem value="> $5,000" /></FormControl>
                                <FormLabel className="font-normal">&gt; 367 tri·ªáu VND/nƒÉm</FormLabel>
                            </FormItem>
                        </RadioGroup>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="dependents" render={({ field }) => (
                  <FormItem>
                    <FormLabel>S·ªë ng∆∞·ªùi ph·ª• thu·ªôc</FormLabel>
                    <FormControl><Input type="number" placeholder="vd: 2" {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="valuableAssets" render={({ field }) => (
                  <FormItem>
                    <FormLabel>T√†i s·∫£n gi√° tr·ªã c·ªßa gia ƒë√¨nh</FormLabel>
                    <FormControl><Textarea placeholder="vd: Nh√†, xe, ƒë·∫•t. Nh·∫≠p 'Kh√¥ng c√≥' n·∫øu kh√¥ng c√≥." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
              </>
            )}
            {currentStep === 4 && (
              <>
                <FormField control={form.control} name="medicalExpenses" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Chi ph√≠ y t·∫ø ƒë·∫∑c bi·ªát</FormLabel>
                    <FormControl><Textarea placeholder="M√¥ t·∫£ c√°c chi ph√≠ y t·∫ø l·ªõn, ƒëang di·ªÖn ra c·ªßa gia ƒë√¨nh. Nh·∫≠p 'Kh√¥ng c√≥' n·∫øu kh√¥ng c√≥." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="specialCircumstances" render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ho√†n c·∫£nh ƒë·∫∑c bi·ªát kh√°c</FormLabel>
                    <FormControl><Textarea placeholder="M√¥ t·∫£ c√°c kh√≥ khƒÉn kh√°c nh∆∞ m·∫•t vi·ªác, thi√™n tai... Nh·∫≠p 'Kh√¥ng c√≥' n·∫øu kh√¥ng c√≥." {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
              </>
            )}
            {currentStep === 5 && (
              <>
                <FormField control={form.control} name="aspirations" render={({ field }) => (
                  <FormItem>
                    <FormLabel>B√†i lu·∫≠n v·ªÅ nguy·ªán v·ªçng</FormLabel>
                    <FormControl><Textarea rows={6} placeholder="H√£y chia s·∫ª v·ªÅ b·∫£n th√¢n, ∆∞·ªõc m∆° v√† l√Ω do b·∫°n t√¨m ki·∫øm s·ª± h·ªó tr·ª£." {...field} /></FormControl>
                    <FormDescription>T·ªëi thi·ªÉu 50 k√Ω t·ª±.</FormDescription>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField control={form.control} name="careerGoals" render={({ field }) => (
                  <FormItem>
                    <FormLabel>M·ª•c ti√™u ngh·ªÅ nghi·ªáp & K·∫ø ho·∫°ch t∆∞∆°ng lai</FormLabel>
                    <FormControl><Textarea rows={4} placeholder="M√¥ t·∫£ m·ª•c ti√™u ngh·ªÅ nghi·ªáp trong 5-10 nƒÉm t·ªõi..." {...field} /></FormControl>
                    <FormDescription>T·ªëi thi·ªÉu 50 k√Ω t·ª±.</FormDescription>
                    <FormMessage />
                  </FormItem>
                )} />
              </>
            )}
          </CardContent>

          <CardFooter className="flex justify-between">
            <Button type="button" variant="outline" onClick={handlePrev} disabled={currentStep === 0}>
              Quay l·∫°i
            </Button>
            {currentStep < steps.length - 1 ? (
              <Button type="button" onClick={handleNext}>
                Ti·∫øp theo
              </Button>
            ) : (
              <Button 
                type="submit" 
                className="bg-accent hover:bg-accent/90"
                disabled={isLoading}
              >
                {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'G·ª≠i & ƒê√°nh gi√°'}
              </Button>
            )}
          </CardFooter>
        </form>
      </Form>
    </Card>
  );
}
