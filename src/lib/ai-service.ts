import { chat, Message } from '@/ai/flows/advisor-flow';

// Direct Google AI integration without Genkit dependencies
export interface ChatMessage {
  role: 'user' | 'model';
  content: string;
}

export interface ChatRequest {
  history: ChatMessage[];
  prompt: string;
  userId?: string;
}

// Mock data for AI responses
const scholarships = [
  { name: "Future Leaders Grant", provider: "Tech Innovators Foundation", amount: 5000, minEduscore: 85 },
  { name: "Creative Minds Scholarship", provider: "Arts & Culture Council", amount: 3000, minEduscore: 75 },
  { name: "STEM Achievers Award", provider: "Science & Eng. Society", amount: 10000, minEduscore: 90 },
  { name: "Community First Scholarship", provider: "Local Goodwill Org", amount: 2000, minEduscore: 70 },
  { name: "Phoenix Scholars Program", provider: "Rise Up Foundation", amount: 7500, minEduscore: 80 },
];

const courses = [
  { title: "Web Development Bootcamp", category: "Technology", price: "Paid", rating: 4.8 },
  { title: "Introduction to Business", category: "Business", price: "Free", rating: 4.5 },
  { title: "Graphic Design Masterclass", category: "Design", price: "Paid", rating: 4.9 },
  { title: "Data Science with Python", category: "Technology", price: "Paid", rating: 4.7 },
  { title: "UI/UX Design Fundamentals", category: "Design", price: "Free", rating: 4.7 },
];

const jobs = [
  { title: "Junior Web Developer Intern", company: "Innovatech Solutions", location: "Remote", type: "Internship" },
  { title: "Marketing Assistant (Part-Time)", company: "Growth Wizards", location: "New York, NY", type: "Part-Time" },
  { title: "Data Analyst Intern", company: "DataDriven Inc.", location: "San Francisco, CA", type: "Internship" },
  { title: "Graphic Design Intern", company: "Creative Minds Agency", location: "Remote", type: "Internship" },
];

async function callGoogleAI(messages: any[], apiKey: string): Promise<string> {
  try {
    console.log('Calling Google AI API with', messages.length, 'messages');
    
    // Filter out system messages and format properly for Gemini
    const formattedContents = messages
      .filter(msg => msg.content && msg.content.trim().length > 0)
      .map(msg => ({
        role: msg.role === 'model' ? 'model' : 'user',
        parts: [{ text: msg.content }]
      }));

    console.log('Formatted', formattedContents.length, 'messages for Gemini API');

    const requestBody = {
      contents: formattedContents,
      generationConfig: {
        temperature: 0.8,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 2048, // Increased for longer responses
        candidateCount: 1
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH", 
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    });

    console.log('Gemini API response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error response:', errorText);
      throw new Error(`Google AI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Gemini API response data structure:', {
      hasCandidates: !!data.candidates,
      candidateCount: data.candidates?.length,
      hasContent: !!data.candidates?.[0]?.content,
      hasText: !!data.candidates?.[0]?.content?.parts?.[0]?.text
    });

    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!generatedText) {
      console.error('No text in Gemini response:', data);
      throw new Error('No text generated by Gemini API');
    }

    console.log('Successfully generated text length:', generatedText.length);
    return generatedText;

  } catch (error) {
    console.error('Google AI API Error:', error);
    console.error('Error stack:', error.stack);
    throw error;
  }
}

function generateEnhancedResponse(prompt: string, history: ChatMessage[], eduscoreContext: any): string {
  const lowerPrompt = prompt.toLowerCase();
  
  // Analyze conversation context
  const previousTopics = history
    .filter(msg => msg.role === 'user')
    .map(msg => msg.content.toLowerCase())
    .join(' ');
    
  const hasDiscussedScholarships = previousTopics.includes('scholarship') || previousTopics.includes('h·ªçc b·ªïng');
  const hasDiscussedJobs = previousTopics.includes('job') || previousTopics.includes('vi·ªác l√†m') || previousTopics.includes('career');
  const hasDiscussedFinance = previousTopics.includes('money') || previousTopics.includes('financial') || previousTopics.includes('loan') || previousTopics.includes('ti·ªÅn');

  // Financial topics - enhanced responses
  if (lowerPrompt.includes('financial') || lowerPrompt.includes('money') || lowerPrompt.includes('budget') || lowerPrompt.includes('investment') || lowerPrompt.includes('loan') || lowerPrompt.includes('save') || lowerPrompt.includes('bank')) {
    let response = `T√¥i r·∫•t vui ƒë∆∞·ª£c t∆∞ v·∫•n t√†i ch√≠nh cho b·∫°n! D·ª±a tr√™n t√¨nh h√¨nh kinh t·∫ø Vi·ªát Nam hi·ªán t·∫°i, c√≥ nhi·ªÅu c∆° h·ªôi t√†i ch√≠nh th√∫ v·ªã cho sinh vi√™n.\n\n`;
    
    if (lowerPrompt.includes('loan') || lowerPrompt.includes('vay')) {
      response += `**V·ªÅ vay h·ªçc t·∫≠p:**\n`;
      response += `- BIDV c√≥ g√≥i vay sinh vi√™n l√£i su·∫•t ch·ªâ 6.5%/nƒÉm, th·∫•p nh·∫•t th·ªã tr∆∞·ªùng\n`;
      response += `- Vietcombank cung c·∫•p vay l√™n ƒë·∫øn 500 tri·ªáu VND v·ªõi th·ªùi h·∫°n 15 nƒÉm\n`;
      response += `- VPBank c√≥ ∆∞u ƒë√£i √¢n h·∫°n g·ªëc trong su·ªët th·ªùi gian h·ªçc\n\n`;
      response += `V·ªõi ${eduscoreContext?.eduscore || 'ƒëi·ªÉm EduScore'} c·ªßa b·∫°n, b·∫°n c√≥ th·ªÉ ƒë·ªß ƒëi·ªÅu ki·ªán cho c√°c g√≥i vay ∆∞u ƒë√£i. `;
    } else if (lowerPrompt.includes('invest') || lowerPrompt.includes('ƒë·∫ßu t∆∞')) {
      response += `**V·ªÅ ƒë·∫ßu t∆∞ cho sinh vi√™n:**\n`;
      response += `- Ti·∫øt ki·ªám c√≥ k·ª≥ h·∫°n: L√£i su·∫•t 5.5-6.5%/nƒÉm, an to√†n tuy·ªát ƒë·ªëi\n`;
      response += `- Qu·ªπ m·ªü VCBF, VFMVF1: L·ª£i nhu·∫≠n trung b√¨nh 10-12%/nƒÉm\n`;
      response += `- Ch·ª©ng kho√°n: VN-Index ƒë√£ tƒÉng 12% t·ª´ ƒë·∫ßu nƒÉm, c·ªï phi·∫øu nh∆∞ VCB, VIC, FPT ·ªïn ƒë·ªãnh\n\n`;
    } else {
      response += `**T∆∞ v·∫•n ng√¢n s√°ch sinh vi√™n:**\n`;
      response += `- Chi ph√≠ sinh ho·∫°t trung b√¨nh t·∫°i HCM/HN: 6-8 tri·ªáu VND/th√°ng\n`;
      response += `- √Åp d·ª•ng quy t·∫Øc 50/30/20: 50% c·∫ßn thi·∫øt, 30% gi·∫£i tr√≠, 20% ti·∫øt ki·ªám\n`;
      response += `- V·ªõi l∆∞∆°ng part-time 4-6 tri·ªáu, b·∫°n v·∫´n c√≥ th·ªÉ ti·∫øt ki·ªám 800k-1.2 tri·ªáu/th√°ng\n\n`;
    }
    
    response += `B·∫°n ƒëang quan t√¢m ƒë·∫øn kh√≠a c·∫°nh n√†o c·ª• th·ªÉ? T√¥i c√≥ th·ªÉ ph√¢n t√≠ch chi ti·∫øt h∆°n v·ªÅ l√£i su·∫•t, r·ªßi ro, hay c√°ch th·ª©c ƒëƒÉng k√Ω. `;
    if (eduscoreContext?.major) {
      response += `V·ªõi chuy√™n ng√†nh ${eduscoreContext.major}, t√¥i c≈©ng c√≥ th·ªÉ ƒë∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh ph√π h·ª£p v·ªõi tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp c·ªßa b·∫°n.`;
    }
    
    return response;
  }

  // Scholarship responses
  if (lowerPrompt.includes('scholarship') || lowerPrompt.includes('h·ªçc b·ªïng') || lowerPrompt.includes('funding')) {
    const eligibleScholarships = eduscoreContext?.eduscore 
      ? scholarships.filter(s => s.minEduscore <= eduscoreContext.eduscore)
      : scholarships.slice(0, 4);
    
    let response = hasDiscussedScholarships 
      ? `T√¥i th·∫•y b·∫°n v·∫´n quan t√¢m ƒë·∫øn h·ªçc b·ªïng! ƒê·ªÉ b·ªï sung th√™m cho cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc, ` 
      : `Tuy·ªát v·ªùi! H·ªçc b·ªïng l√† c∆° h·ªôi tuy·ªát v·ªùi ƒë·ªÉ gi·∫£m g√°nh n·∫∑ng t√†i ch√≠nh. `;
      
    if (eduscoreContext?.eduscore) {
      response += `V·ªõi EduScore ${eduscoreContext.eduscore}/100 c·ªßa b·∫°n, `;
      if (eduscoreContext.eduscore >= 85) {
        response += `b·∫°n ƒë·ªß ƒëi·ªÅu ki·ªán cho h·∫ßu h·∫øt c√°c h·ªçc b·ªïng danh gi√°!\n\n`;
      } else if (eduscoreContext.eduscore >= 75) {
        response += `b·∫°n c√≥ c∆° h·ªôi t·ªët v·ªõi nhi·ªÅu h·ªçc b·ªïng!\n\n`;
      } else {
        response += `b·∫°n v·∫´n c√≥ th·ªÉ ƒëƒÉng k√Ω m·ªôt s·ªë h·ªçc b·ªïng v√† n√™n c·∫£i thi·ªán EduScore.\n\n`;
      }
    }
    
    response += `**H·ªçc b·ªïng ph√π h·ª£p:**\n`;
    eligibleScholarships.forEach((scholarship, index) => {
      response += `${index + 1}. **${scholarship.name}** (${scholarship.provider})\n`;
      response += `   üí∞ Gi√° tr·ªã: ${scholarship.amount.toLocaleString()} USD\n`;
      response += `   üìä EduScore t·ªëi thi·ªÉu: ${scholarship.minEduscore}\n\n`;
    });
    
    response += `B·∫°n c√≥ mu·ªën t√¥i h∆∞·ªõng d·∫´n c·ª• th·ªÉ c√°ch chu·∫©n b·ªã h·ªì s∆° cho h·ªçc b·ªïng n√†o kh√¥ng? `;
    if (eduscoreContext?.major) {
      response += `T√¥i c≈©ng c√≥ th·ªÉ t∆∞ v·∫•n th√™m v·ªÅ h·ªçc b·ªïng chuy√™n ng√†nh ${eduscoreContext.major}.`;
    }
    
    return response;
  }

  // Job and career responses  
  if (lowerPrompt.includes('job') || lowerPrompt.includes('career') || lowerPrompt.includes('vi·ªác l√†m') || lowerPrompt.includes('ngh·ªÅ nghi·ªáp') || lowerPrompt.includes('internship')) {
    let response = hasDiscussedJobs 
      ? `T√¥i th·∫•y b·∫°n ti·∫øp t·ª•c quan t√¢m ƒë·∫øn c∆° h·ªôi ngh·ªÅ nghi·ªáp! ` 
      : `R·∫•t t·ªët khi b·∫°n quan t√¢m ƒë·∫øn ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp! `;
      
    if (eduscoreContext?.major) {
      response += `V·ªõi chuy√™n ng√†nh ${eduscoreContext.major}, th·ªã tr∆∞·ªùng hi·ªán t·∫°i c√≥ nhi·ªÅu c∆° h·ªôi th√∫ v·ªã.\n\n`;
      
      if (eduscoreContext.major.toLowerCase().includes('technology') || eduscoreContext.major.toLowerCase().includes('computer')) {
        response += `**C∆° h·ªôi IT t·∫°i Vi·ªát Nam:**\n`;
        response += `- Junior Developer: 15-25 tri·ªáu VND (FPT, TMA, Vng)\n`;
        response += `- Fresher l∆∞∆°ng cao: 20-35 tri·ªáu VND (Google, Microsoft, Shopee)\n`;
        response += `- Remote work: Thu nh·∫≠p USD, 1000-2500$/th√°ng\n\n`;
      } else if (eduscoreContext.major.toLowerCase().includes('business') || eduscoreContext.major.toLowerCase().includes('marketing')) {
        response += `**C∆° h·ªôi kinh doanh:**\n`;
        response += `- Marketing Executive: 12-20 tri·ªáu VND (Unilever, P&G)\n`;
        response += `- Business Analyst: 18-30 tri·ªáu VND (c√°c ng√¢n h√†ng l·ªõn)\n`;
        response += `- Sales Manager: 15-25 tri·ªáu + hoa h·ªìng\n\n`;
      }
    } else {
      response += `D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë c∆° h·ªôi vi·ªác l√†m ph·ªï bi·∫øn:\n\n`;
      jobs.slice(0, 4).forEach((job, index) => {
        response += `${index + 1}. **${job.title}** t·∫°i ${job.company}\n`;
        response += `   üìç ${job.location} | üí∞ ${job.salary}\n`;
        response += `   üè∑Ô∏è ${job.tags.join(', ')}\n\n`;
      });
    }
    
    response += `B·∫°n mu·ªën t·∫≠p trung v√†o lo·∫°i c√¥ng vi·ªác n√†o? T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ c√°ch chu·∫©n b·ªã CV, ph·ªèng v·∫•n, `;
    if (eduscoreContext?.technicalSkills?.length > 0) {
      response += `ho·∫∑c ph√°t tri·ªÉn th√™m k·ªπ nƒÉng t·ª´ ${eduscoreContext.technicalSkills.join(', ')} hi·ªán t·∫°i c·ªßa b·∫°n.`;
    } else {
      response += `ho·∫∑c c√°c k·ªπ nƒÉng c·∫ßn thi·∫øt cho ng√†nh b·∫°n quan t√¢m.`;
    }
    
    return response;
  }

  // Course and education responses
  if (lowerPrompt.includes('course') || lowerPrompt.includes('learn') || lowerPrompt.includes('study') || lowerPrompt.includes('kh√≥a h·ªçc') || lowerPrompt.includes('h·ªçc')) {
    let response = `H·ªçc h·ªèi kh√¥ng ng·ª´ng l√† ch√¨a kh√≥a th√†nh c√¥ng! `;
    
    if (eduscoreContext?.careerGoals) {
      response += `V·ªõi m·ª•c ti√™u ${eduscoreContext.careerGoals} c·ªßa b·∫°n, t√¥i khuy√™n n√™n t·∫≠p trung v√†o:\n\n`;
    } else {
      response += `D∆∞·ªõi ƒë√¢y l√† c√°c kh√≥a h·ªçc ph·ªï bi·∫øn hi·ªán t·∫°i:\n\n`;
    }
    
    courses.slice(0, 5).forEach((course, index) => {
      response += `${index + 1}. **${course.title}**\n`;
      response += `   ‚è±Ô∏è ${course.duration} | üéØ ${course.level} | ‚≠ê ${course.rating}\n`;
      response += `   üí∞ ${course.price} | üìö ${course.category}\n\n`;
    });
    
    response += `Nh·ªØng kh√≥a h·ªçc n√†y c√≥ th·ªÉ gi√∫p n√¢ng cao EduScore v√† tƒÉng c∆° h·ªôi ngh·ªÅ nghi·ªáp. `;
    response += `B·∫°n ƒëang mu·ªën ph√°t tri·ªÉn k·ªπ nƒÉng n√†o c·ª• th·ªÉ? T√¥i c√≥ th·ªÉ ƒë∆∞a ra l·ªô tr√¨nh h·ªçc t·∫≠p chi ti·∫øt!`;
    
    return response;
  }

  // EduScore improvement
  if (lowerPrompt.includes('eduscore') || lowerPrompt.includes('score') || lowerPrompt.includes('improve') || lowerPrompt.includes('c·∫£i thi·ªán')) {
    let response = ``;
    
    if (eduscoreContext?.eduscore) {
      response += `V·ªõi EduScore ${eduscoreContext.eduscore}/100 hi·ªán t·∫°i, b·∫°n `;
      if (eduscoreContext.eduscore >= 80) {
        response += `ƒëang c√≥ th√†nh t√≠ch r·∫•t t·ªët! ƒê·ªÉ ƒë·∫°t m·ª©c cao h∆°n n·ªØa:\n\n`;
      } else if (eduscoreContext.eduscore >= 60) {
        response += `c√≥ ti·ªÅm nƒÉng c·∫£i thi·ªán ƒë√°ng k·ªÉ. ƒê√¢y l√† c√°ch:\n\n`;
      } else {
        response += `c·∫ßn t·∫≠p trung c·∫£i thi·ªán ƒë·ªÉ m·ªü ra nhi·ªÅu c∆° h·ªôi h∆°n:\n\n`;
      }
    } else {
      response += `EduScore l√† ch·ªâ s·ªë quan tr·ªçng ƒë√°nh gi√° nƒÉng l·ª±c to√†n di·ªán c·ªßa b·∫°n. ƒê·ªÉ c·∫£i thi·ªán:\n\n`;
    }
    
    response += `üìö **Th√†nh t√≠ch h·ªçc t·∫≠p (40%)**\n`;
    response += `- Upload b·∫£ng ƒëi·ªÉm, ch·ª©ng ch·ªâ ch√≠nh th·ª©c\n`;
    response += `- Ho√†n th√†nh c√°c kh√≥a h·ªçc online c√≥ ch·ª©ng nh·∫≠n\n`;
    response += `- Tham gia cu·ªôc thi h·ªçc thu·∫≠t\n\n`;
    
    response += `üîß **K·ªπ nƒÉng chuy√™n m√¥n (30%)**\n`;
    response += `- B·ªï sung k·ªπ nƒÉng IT: Python, Java, React\n`;
    response += `- Ch·ª©ng ch·ªâ qu·ªëc t·∫ø: AWS, Google Analytics, Microsoft\n`;
    response += `- Portfolio d·ª± √°n th·ª±c t·∫ø\n\n`;
    
    response += `üåü **Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a (20%)**\n`;
    response += `- T√¨nh nguy·ªán vi√™n, leader c√¢u l·∫°c b·ªô\n`;
    response += `- Th·ª±c t·∫≠p t·∫°i doanh nghi·ªáp uy t√≠n\n`;
    response += `- Tham gia hackathon, startup competition\n\n`;
    
    response += `üíº **Kinh nghi·ªám l√†m vi·ªác (10%)**\n`;
    response += `- Part-time li√™n quan ƒë·∫øn chuy√™n ng√†nh\n`;
    response += `- Freelance projects\n`;
    response += `- Th∆∞ gi·ªõi thi·ªáu t·ª´ gi·∫£ng vi√™n/nh√† tuy·ªÉn d·ª•ng\n\n`;
    
    response += `B·∫°n mu·ªën t·∫≠p trung c·∫£i thi·ªán kh√≠a c·∫°nh n√†o tr∆∞·ªõc? T√¥i c√≥ th·ªÉ ƒë∆∞a ra k·∫ø ho·∫°ch c·ª• th·ªÉ trong 3-6 th√°ng!`;
    
    return response;
  }

  // Greeting and general responses
  if (lowerPrompt.includes('hello') || lowerPrompt.includes('hi') || lowerPrompt.includes('xin ch√†o') || lowerPrompt.includes('ch√†o')) {
    let response = `Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! `;
    
    if (eduscoreContext?.eduscore) {
      response += `T√¥i th·∫•y b·∫°n c√≥ EduScore ${eduscoreContext.eduscore}/100`;
      if (eduscoreContext.major) {
        response += ` v√† ƒëang h·ªçc ${eduscoreContext.major}`;
      }
      response += `. ƒêi·ªÅu n√†y th·∫≠t tuy·ªát v·ªùi!\n\n`;
    } else {
      response += `T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ gi√°o d·ª•c v√† t√†i ch√≠nh t·∫°i Vi·ªát Nam.\n\n`;
    }
    
    response += `H√¥m nay t√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n`;
    response += `üéì **H·ªçc b·ªïng v√† t√†i tr·ª£ h·ªçc t·∫≠p**\n`;
    response += `üíº **C∆° h·ªôi vi·ªác l√†m v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp**\n`;
    response += `üí∞ **T∆∞ v·∫•n t√†i ch√≠nh v√† ƒë·∫ßu t∆∞ cho sinh vi√™n**\n`;
    response += `üìö **Kh√≥a h·ªçc v√† ph√°t tri·ªÉn k·ªπ nƒÉng**\n`;
    response += `üìä **C·∫£i thi·ªán EduScore v√† h·ªì s∆° c√° nh√¢n**\n\n`;
    
    response += `B·∫°n quan t√¢m ƒë·∫øn ch·ªß ƒë·ªÅ n√†o nh·∫•t? Hay c√≥ th·∫Øc m·∫Øc c·ª• th·ªÉ n√†o t√¥i c√≥ th·ªÉ gi√∫p?`;
    
    return response;
  }

  // Default conversational response
  let response = `C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! `;
  
  if (history.length > 0) {
    response += `T√¥i hi·ªÉu b·∫°n ƒëang t√¨m hi·ªÉu v·ªÅ nhi·ªÅu kh√≠a c·∫°nh kh√°c nhau. `;
  }
  
  response += `V·ªõi kinh nghi·ªám t∆∞ v·∫•n gi√°o d·ª•c t·∫°i Vi·ªát Nam, t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:\n\n`;
  response += `üìà **Ph√¢n t√≠ch t√†i ch√≠nh chi ti·∫øt**: L√£i su·∫•t vay h·ªçc, ƒë·∫ßu t∆∞, ng√¢n s√°ch sinh vi√™n\n`;
  response += `üéØ **ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp**: D·ª±a tr√™n xu h∆∞·ªõng th·ªã tr∆∞·ªùng 2024-2025\n`;
  response += `üèÜ **H·ªçc b·ªïng v√† c∆° h·ªôi**: Ph√π h·ª£p v·ªõi nƒÉng l·ª±c v√† nguy·ªán v·ªçng\n\n`;
  
  if (eduscoreContext?.eduscore) {
    response += `V·ªõi EduScore ${eduscoreContext.eduscore}/100 v√† profile hi·ªán t·∫°i c·ªßa b·∫°n, t√¥i c√≥ th·ªÉ ƒë∆∞a ra l·ªùi khuy√™n r·∫•t c·ª• th·ªÉ. `;
  }
  
  response += `B·∫°n mu·ªën ƒëi s√¢u v√†o ch·ªß ƒë·ªÅ n√†o? T√¥i s·∫µn s√†ng ph√¢n t√≠ch v√† t∆∞ v·∫•n chi ti·∫øt!`;
  
  return response;
}

function generateIntelligentResponse(prompt: string, eduscore?: number): string {
  const lowerPrompt = prompt.toLowerCase();
  
  if (lowerPrompt.includes('scholarship') || lowerPrompt.includes('funding') || lowerPrompt.includes('grant')) {
    const eligibleScholarships = eduscore 
      ? scholarships.filter(s => s.minEduscore <= eduscore)
      : scholarships.slice(0, 3);
    
    let response = `Based on ${eduscore ? `your EduScore of ${eduscore}` : 'your profile'}, here are some great scholarship opportunities:\n\n`;
    
    eligibleScholarships.forEach((scholarship, index) => {
      response += `${index + 1}. **${scholarship.name}**\n`;
      response += `   ‚Ä¢ Provider: ${scholarship.provider}\n`;
      response += `   ‚Ä¢ Amount: $${scholarship.amount.toLocaleString()}\n`;
      response += `   ‚Ä¢ Min EduScore: ${scholarship.minEduscore}\n\n`;
    });
    
    response += "Would you like more details about any of these scholarships or help with applications?";
    return response;
  }
  
  if (lowerPrompt.includes('course') || lowerPrompt.includes('learn') || lowerPrompt.includes('study')) {
    let response = "Here are some excellent courses that might interest you:\n\n";
    
    courses.slice(0, 4).forEach((course, index) => {
      response += `${index + 1}. **${course.title}**\n`;
      response += `   ‚Ä¢ Category: ${course.category}\n`;
      response += `   ‚Ä¢ Price: ${course.price}\n`;
      response += `   ‚Ä¢ Rating: ${course.rating}‚≠ê\n\n`;
    });
    
    response += "These courses can help boost your EduScore and career prospects!";
    return response;
  }
  
  if (lowerPrompt.includes('job') || lowerPrompt.includes('intern') || lowerPrompt.includes('career')) {
    let response = "Here are some great job and internship opportunities:\n\n";
    
    jobs.forEach((job, index) => {
      response += `${index + 1}. **${job.title}**\n`;
      response += `   ‚Ä¢ Company: ${job.company}\n`;
      response += `   ‚Ä¢ Location: ${job.location}\n`;
      response += `   ‚Ä¢ Type: ${job.type}\n\n`;
    });
    
    response += "Would you like tips on how to apply or prepare for interviews?";
    return response;
  }
  
  if (lowerPrompt.includes('eduscore') || lowerPrompt.includes('score') || lowerPrompt.includes('improve')) {
    return `Your current EduScore is ${eduscore || 'not yet calculated'}. Here are ways to improve it:

üìö **Academic Excellence**
‚Ä¢ Upload transcripts and certificates
‚Ä¢ Complete relevant courses and certifications
‚Ä¢ Maintain good grades

üîç **Skills Development**  
‚Ä¢ Add verified skills to your profile
‚Ä¢ Get endorsements from peers and mentors
‚Ä¢ Complete skill assessments

üåü **Extracurricular Activities**
‚Ä¢ Participate in volunteer work
‚Ä¢ Join professional organizations
‚Ä¢ Lead community projects

üíº **Professional Experience**
‚Ä¢ Document internships and work experience
‚Ä¢ Get recommendation letters
‚Ä¢ Build a strong portfolio

Each verified element increases your EduScore and scholarship eligibility!`;
  }
  
  // Default helpful response
  return `Hello! I'm your AI advisor for education and career guidance. I can help you with:

üéì **Scholarships** - Find funding opportunities matching your profile
üìö **Courses** - Discover learning opportunities to boost your skills  
üíº **Jobs & Internships** - Explore career opportunities
üìä **EduScore** - Tips to improve your academic scoring

What would you like to explore today? Just ask me about any of these topics!`;
}

export async function processAIChat(request: ChatRequest): Promise<string> {
  console.log('üîÑ processAIChat called with:', {
    prompt: request.prompt?.substring(0, 100) + '...',
    historyLength: request.history?.length || 0,
    userId: request.userId || 'none'
  });

  try {
    // Get user's EduScore profile if available (server-side safe)
    let eduscoreContext = null;
    try {
      // Only try to get EduScore context if we're on client side
      if (typeof window !== 'undefined') {
        const { EduscoreService } = await import('./eduscore-service');
        eduscoreContext = EduscoreService.getRecommendationContext();
      }
    } catch (eduscoreError) {
      console.log('üìä EduScore service not available on server side');
    }
    console.log('üìä EduScore context:', eduscoreContext ? 'found' : 'not found');
    
    // Build comprehensive Vietnamese system instruction with icon support
    let systemInstruction = `### B·∫°n l√† Hyhan - ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh AI, chuy√™n cung c·∫•p th√¥ng tin v√† t∆∞ v·∫•n c√° nh√¢n h√≥a cho h·ªçc sinh, sinh vi√™n v·ªÅ c√°c c∆° h·ªôi h·ªçc t·∫≠p, ph√°t tri·ªÉn s·ª± nghi·ªáp v√† h·ªó tr·ª£ t√†i ch√≠nh.

### ƒê·ªäNH H∆Ø·ªöNG GIAO TI·∫æP, C√ÅCH TR·∫¢ L·ªúI:
- Th√¢n thi·ªán v√† g·∫ßn g≈©i: X∆∞ng h√¥ "m√¨nh" - "b·∫°n", "Hyhan" - "b·∫°n" ho·∫∑c "t√¥i" - "b·∫°n" t√πy ng·ªØ c·∫£nh, lu√¥n s·ª≠ d·ª•ng gi·ªçng ƒëi·ªáu t√≠ch c·ª±c, ƒë·ªông vi√™n v√† d·ªÖ ti·∫øp c·∫≠n.
- Chuy√™n nghi·ªáp v√† r√µ r√†ng: Tr·∫£ l·ªùi tr·ª±c ti·∫øp v√†o c√¢u h·ªèi, tr√°nh lan man.
- C·∫•u tr√∫c ph·∫£n h·ªìi:
+ Ph·∫ßn m·ªü ƒë·∫ßu: B·∫Øt ƒë·∫ßu b·∫±ng l·ªùi ch√†o th√¢n thi·ªán, th·ªÉ hi·ªán s·ª± th·∫•u hi·ªÉu c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
+ N·ªôi dung ch√≠nh: Li·ªát k√™ c√°c th√¥ng tin m·ªôt c√°ch khoa h·ªçc, s·ª≠ d·ª•ng c√°c ti√™u ƒë·ªÅ, danh s√°ch (list), v√† in ƒë·∫≠m (bold) ƒë·ªÉ l√†m n·ªïi b·∫≠t th√¥ng tin quan tr·ªçng.
+ Ph·∫ßn k·∫øt: K·∫øt th√∫c b·∫±ng m·ªôt c√¢u h·ªèi m·ªü ƒë·ªÉ khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng ti·∫øp t·ª•c t∆∞∆°ng t√°c, ho·∫∑c m·ªôt l·ªùi ch√∫c t·ªët ƒë·∫πp.

### C√ÅC QUY T·∫ÆC TR√åNH B√ÄY:
- ·ªû ƒë·∫ßu c√°c n·ªôi dung ch√≠nh, m·ª•c ch√≠nh th√¨ s·ª≠ d·ª•ng icon ƒë·ªÉ tƒÉng t√≠nh tr·ª±c quan:
  + üéì cho h·ªçc b·ªïng v√† t√†i tr·ª£ h·ªçc t·∫≠p
  + üìö cho kh√≥a h·ªçc v√† ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o
  + üíº cho vi·ªác l√†m v√† c∆° h·ªôi ngh·ªÅ nghi·ªáp
  + üí∞ cho t∆∞ v·∫•n t√†i ch√≠nh v√† ƒë·∫ßu t∆∞
  + üìä cho ph√¢n t√≠ch EduScore v√† c·∫£i thi·ªán h·ªì s∆°
  + ‚ú® cho l·ªùi khuy√™n v√† g·ª£i √Ω
- S·ª≠ d·ª•ng in ƒë·∫≠m (**text**) cho c√°c th√¥ng tin quan tr·ªçng
- S·ª≠ d·ª•ng danh s√°ch c√≥ d·∫•u ƒë·∫ßu d√≤ng (-) ƒë·ªÉ li·ªát k√™ th√¥ng tin
- Tr√°nh ƒë·ªÉ kho·∫£ng tr·ªëng d∆∞ th·ª´a gi·ªØa c√°c d√≤ng`;

    if (eduscoreContext) {
      systemInstruction += `

User profile:
- EduScore: ${eduscoreContext.eduscore}/100
- Major: ${eduscoreContext.major || 'Not specified'}  
- Year: ${eduscoreContext.currentYear || 'Not specified'}
- Skills: ${eduscoreContext.technicalSkills?.join(', ') || 'Not specified'}
- Goals: ${eduscoreContext.careerGoals || 'Not specified'}

Personalize your responses using this information.`;
    }

    systemInstruction += `

Respond conversationally with detailed, helpful advice. Ask follow-up questions to better understand their needs.`;

    // Build conversation messages for Gemini
    const conversationHistory = request.history.map(msg => ({
      role: msg.role === 'user' ? 'user' : 'model',
      content: msg.content
    }));

    // Combine system instruction with conversation  
    let messages;
    if (conversationHistory.length === 0) {
      // First message - include system instruction
      messages = [
        { role: 'user', content: systemInstruction + '\n\nUser question: ' + request.prompt }
      ];
    } else {
      // Ongoing conversation - include system instruction with history
      messages = [
        { role: 'user', content: systemInstruction },
        { role: 'model', content: 'I understand. I\'ll provide personalized, conversational guidance for Vietnamese students.' },
        ...conversationHistory,
        { role: 'user', content: request.prompt }
      ];
    }

    // Use Google Gemini API with the correct environment variable from .env.local
    const apiKey = process.env.GOOGLE_GENAI_API_KEY || process.env.GOOGLE_AI_API_KEY || process.env.GEMINI_API_KEY;
    
    if (!apiKey) {
      console.error('‚ùå No Google AI API key found!');
      console.error('Please add GOOGLE_GENAI_API_KEY to your .env.local file');
      throw new Error('API key required for AI functionality');
    }

    console.log('‚úÖ Found API key, calling Google Gemini API...');
    
    try {
      const response = await callGoogleAI(messages, apiKey);
      console.log('‚úÖ Gemini API response length:', response?.length);
      
      if (response && response.length > 10) {
        console.log('‚úÖ Successfully got response from Gemini API');
        return response;
      } else {
        console.error('‚ùå Gemini API returned empty/short response:', response);
        throw new Error('Empty response from Gemini API');
      }
    } catch (apiError) {
      console.error('‚ùå Gemini API error:', apiError);
      console.error('Error details:', apiError.message);
      
      // Re-throw the error so it gets handled properly
      throw new Error(`Gemini API failed: ${apiError.message}`);
    }

  } catch (error) {
    console.error('‚ùå Error processing AI chat:', error);
    console.error('Error details:', error.message);
    
    // If Gemini API fails, still provide an intelligent response but indicate the issue
    console.log('üîÑ Gemini API unavailable, using enhanced local responses');
    
    // Try to get EduScore context safely for fallback
    let fallbackEduscoreContext = null;
    try {
      if (typeof window !== 'undefined') {
        const { EduscoreService } = await import('./eduscore-service');
        fallbackEduscoreContext = EduscoreService.getRecommendationContext();
      }
    } catch (eduscoreError) {
      console.log('üìä EduScore service not available for fallback');
    }
    
    // Add a note about API availability
    const fallbackResponse = generateEnhancedResponse(request.prompt, request.history, fallbackEduscoreContext);
    return `${fallbackResponse}\n\n*Note: AI service is temporarily using local responses. Full AI features will be available when the API connection is restored.*`;
  }
}