'use client';

import { useState, useEffect } from 'react';
import Header from "@/components/shared/Header";
import Footer from "@/components/shared/Footer";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { ArrowRight, Search, Star, AlertCircle, CheckCircle, TrendingUp } from "lucide-react";
import Link from "next/link";
import { useEduscore } from "@/lib/eduscore-service";

// Vietnamese bank loan packages data
const loanPackages = [
  // Major Vietnamese banks
  {
    id: 1,
    bank: "Vietcombank",
    package: "G√≥i vay h·ªçc ph√≠ sinh vi√™n",
    interestRate: "6.5% - 8.5%",
    maxAmount: "200 tri·ªáu VND",
    term: "T·ªëi ƒëa 15 nƒÉm",
    requirements: ["Sinh vi√™n ch√≠nh quy", "B·∫£o l√£nh c·ªßa b·ªë m·∫π", "Gi·∫•y t·ªù h·ªçc t·∫≠p"],
    features: ["Gia h·∫°n n·ª£ g·ªëc trong th·ªùi gian h·ªçc", "L√£i su·∫•t ∆∞u ƒë√£i", "Th·ªß t·ª•c ƒë∆°n gi·∫£n"],
    minEduscore: 70,
    logo: "üè¶",
    rating: 4.5,
    processingTime: "3-5 ng√†y l√†m vi·ªác"
  },
  {
    id: 2,
    bank: "VietinBank",
    package: "T√≠n d·ª•ng gi√°o d·ª•c",
    interestRate: "6.8% - 9.0%",
    maxAmount: "300 tri·ªáu VND",
    term: "T·ªëi ƒëa 20 nƒÉm",
    requirements: ["H·ªçc sinh, sinh vi√™n", "Thu nh·∫≠p gia ƒë√¨nh ·ªïn ƒë·ªãnh", "T√†i s·∫£n ƒë·∫£m b·∫£o"],
    features: ["Cho vay 100% h·ªçc ph√≠", "√Çn h·∫°n n·ª£ g·ªëc", "H·ªó tr·ª£ du h·ªçc"],
    minEduscore: 65,
    logo: "üèõÔ∏è",
    rating: 4.3,
    processingTime: "2-4 ng√†y l√†m vi·ªác"
  },
  {
    id: 3,
    bank: "BIDV",
    package: "Vay gi√°o d·ª•c to√†n di·ªán",
    interestRate: "7.0% - 8.8%",
    maxAmount: "500 tri·ªáu VND",
    term: "T·ªëi ƒëa 25 nƒÉm",
    requirements: ["Gi·∫•y b√°o tr√∫ng tuy·ªÉn", "B·∫£o l√£nh ho·∫∑c th·∫ø ch·∫•p", "CCCD/CMND"],
    features: ["Vay h·ªçc ph√≠ + sinh ho·∫°t ph√≠", "L√£i su·∫•t th·∫£ n·ªïi", "Mi·ªÖn ph√≠ th·∫©m ƒë·ªãnh"],
    minEduscore: 75,
    logo: "üè¢",
    rating: 4.4,
    processingTime: "4-7 ng√†y l√†m vi·ªác"
  },
  {
    id: 4,
    bank: "Agribank",
    package: "Vay h·ªçc t·∫≠p n√¥ng th√¥n",
    interestRate: "5.8% - 7.5%",
    maxAmount: "150 tri·ªáu VND",
    term: "T·ªëi ƒëa 12 nƒÉm",
    requirements: ["H·ªô kh·∫©u n√¥ng th√¥n", "H·ªçc sinh xu·∫•t s·∫Øc", "B·∫£o l√£nh t·∫≠p th·ªÉ"],
    features: ["L√£i su·∫•t ∆∞u ƒë√£i ƒë·∫∑c bi·ªát", "H·ªó tr·ª£ sinh vi√™n v√πng kh√≥ khƒÉn", "Th·ªß t·ª•c ƒë∆°n gi·∫£n"],
    minEduscore: 60,
    logo: "üåæ",
    rating: 4.2,
    processingTime: "1-3 ng√†y l√†m vi·ªác"
  },
  {
    id: 5,
    bank: "Techcombank",
    package: "Smart Study Loan",
    interestRate: "7.5% - 9.5%",
    maxAmount: "800 tri·ªáu VND",
    term: "T·ªëi ƒëa 30 nƒÉm",
    requirements: ["ƒêi·ªÉm thi ƒë·∫°i h·ªçc cao", "Ng√†nh h·ªçc hot", "Thu nh·∫≠p gia ƒë√¨nh"],
    features: ["C√¥ng ngh·ªá s·ªë h√≥a", "Th·∫©m ƒë·ªãnh nhanh", "H·ªó tr·ª£ du h·ªçc qu·ªëc t·∫ø"],
    minEduscore: 80,
    logo: "üí≥",
    rating: 4.6,
    processingTime: "1-2 ng√†y l√†m vi·ªác"
  },
  {
    id: 6,
    bank: "MB Bank",
    package: "Vay gi√°o d·ª•c MB",
    interestRate: "6.9% - 8.9%",
    maxAmount: "400 tri·ªáu VND",
    term: "T·ªëi ƒëa 18 nƒÉm",
    requirements: ["Sinh vi√™n ch√≠nh quy", "B·∫£o l√£nh thu nh·∫≠p", "Gi·∫•y t·ªù h·ª£p l·ªá"],
    features: ["Gi·∫£i ng√¢n linh ho·∫°t", "T∆∞ v·∫•n mi·ªÖn ph√≠", "∆Øu ƒë√£i kh√°ch h√†ng c≈©"],
    minEduscore: 68,
    logo: "üè™",
    rating: 4.1,
    processingTime: "2-5 ng√†y l√†m vi·ªác"
  },
  {
    id: 7,
    bank: "ACB",
    package: "T∆∞∆°ng lai xanh",
    interestRate: "7.2% - 9.2%",
    maxAmount: "350 tri·ªáu VND",
    term: "T·ªëi ƒëa 22 nƒÉm",
    requirements: ["Ng√†nh h·ªçc STEM", "GPA > 3.0", "K·∫ø ho·∫°ch h·ªçc t·∫≠p r√µ r√†ng"],
    features: ["∆Øu ti√™n ng√†nh c√¥ng ngh·ªá", "H·ªó tr·ª£ th·ª±c t·∫≠p", "K·∫øt n·ªëi vi·ªác l√†m"],
    minEduscore: 78,
    logo: "üíö",
    rating: 4.3,
    processingTime: "3-6 ng√†y l√†m vi·ªác"
  },
  {
    id: 8,
    bank: "VPBank",
    package: "Vay ti√™u d√πng gi√°o d·ª•c",
    interestRate: "8.0% - 10.5%",
    maxAmount: "250 tri·ªáu VND",
    term: "T·ªëi ƒëa 10 nƒÉm",
    requirements: ["ƒê·ªô tu·ªïi 18-60", "Thu nh·∫≠p ch·ª©ng minh", "L·ªãch s·ª≠ t√≠n d·ª•ng t·ªët"],
    features: ["Th·ªß t·ª•c online", "Gi·∫£i ng√¢n nhanh", "Kh√¥ng c·∫ßn t√†i s·∫£n th·∫ø ch·∫•p"],
    minEduscore: 65,
    logo: "üíé",
    rating: 4.0,
    processingTime: "1-3 ng√†y l√†m vi·ªác"
  }
];

export default function FinancePage() {
    const [searchTerm, setSearchTerm] = useState("");
    const [bankFilter, setBankFilter] = useState("");
    const [maxAmountFilter, setMaxAmountFilter] = useState("");
    const [interestRateFilter, setInterestRateFilter] = useState("");
    const [showRecommended, setShowRecommended] = useState(false);
    const { getRecommendationContext } = useEduscore();
    
    const [eduscoreContext, setEduscoreContext] = useState<any>(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const context = getRecommendationContext();
        setEduscoreContext(context);
        setIsLoading(false);
    }, []);

    const filteredPackages = loanPackages
        .filter(pkg => 
            pkg.bank.toLowerCase().includes(searchTerm.toLowerCase()) ||
            pkg.package.toLowerCase().includes(searchTerm.toLowerCase())
        )
        .filter(pkg => bankFilter === "" || bankFilter === "all" || pkg.bank === bankFilter)
        .filter(pkg => {
            if (!maxAmountFilter || maxAmountFilter === "all") return true;
            const maxAmount = parseInt(pkg.maxAmount.replace(/\D/g, ''));
            switch(maxAmountFilter) {
                case "under-200": return maxAmount < 200;
                case "200-400": return maxAmount >= 200 && maxAmount < 400;
                case "above-400": return maxAmount >= 400;
                default: return true;
            }
        })
        .filter(pkg => {
            if (!interestRateFilter || interestRateFilter === "all") return true;
            const minRate = parseFloat(pkg.interestRate.split('%')[0]);
            switch(interestRateFilter) {
                case "under-7": return minRate < 7;
                case "7-8": return minRate >= 7 && minRate < 8;
                case "above-8": return minRate >= 8;
                default: return true;
            }
        })
        .filter(pkg => {
            if (!showRecommended || !eduscoreContext) return true;
            return eduscoreContext.eduscore >= pkg.minEduscore;
        })
        .sort((a, b) => {
            if (eduscoreContext && showRecommended) {
                const aRecommended = eduscoreContext.eduscore >= a.minEduscore;
                const bRecommended = eduscoreContext.eduscore >= b.minEduscore;
                if (aRecommended && !bRecommended) return -1;
                if (!aRecommended && bRecommended) return 1;
            }
            return b.rating - a.rating;
        });

    if (isLoading) {
        return (
            <div className="flex flex-col min-h-screen bg-white">
                <Header />
                <main className="flex-grow flex items-center justify-center">
                    <div className="text-center">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
                        <p>ƒêang t·∫£i th√¥ng tin...</p>
                    </div>
                </main>
                <Footer />
            </div>
        );
    }

    return (
        <div className="flex flex-col min-h-screen bg-white">
            <Header />
            <main className="flex-grow">
                {/* Hero Section */}
                <div className="relative h-[30vh] md:h-[40vh] flex items-center justify-center text-center">
                    <div className="flex flex-col items-center">
                        <h1 className="text-6xl md:text-8xl font-bold font-anton tracking-wider leading-normal pt-6 pb-4 text-transparent bg-clip-text bg-gradient-to-r from-blue-600 via-cyan-500 to-blue-800 mb-6">
                        H·ªñ TR·ª¢ T√ÄI CH√çNH
                        </h1>
                        <p className="text-base md:text-2xl italic">"ƒê·ªìng h√†nh h√¥m nay, ti·∫øp b∆∞·ªõc ng√†y mai"</p>
                    </div>
                </div>

                {/* EduScore Integration Section */}
                {eduscoreContext ? (
                    <section className="py-8 bg-gradient-to-r from-green-50 via-blue-50 to-purple-50">
                        <div className="container mx-auto px-4">
                            <Card className="max-w-4xl mx-auto border-green-200 bg-green-50/50">
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2 text-green-800">
                                        <CheckCircle className="h-6 w-6" />
                                        EduScore c·ªßa b·∫°n: {eduscoreContext.eduscore}/100
                                    </CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div className="grid md:grid-cols-2 gap-6">
                                        <div>
                                            <h3 className="font-semibold mb-2">Th√¥ng tin h·ªçc t·∫≠p</h3>
                                            <p><strong>Chuy√™n ng√†nh:</strong> {eduscoreContext.major}</p>
                                            <p><strong>NƒÉm h·ªçc:</strong> {eduscoreContext.currentYear}</p>
                                        </div>
                                        <div>
                                            <h3 className="font-semibold mb-2">G√≥i vay ph√π h·ª£p</h3>
                                            <p className="text-sm text-muted-foreground">
                                                V·ªõi EduScore {eduscoreContext.eduscore}, b·∫°n ƒë·ªß ƒëi·ªÅu ki·ªán cho{" "}
                                                <span className="font-semibold text-green-600">
                                                    {loanPackages.filter(pkg => eduscoreContext.eduscore >= pkg.minEduscore).length}
                                                </span> g√≥i vay
                                            </p>
                                            <Button 
                                                onClick={() => setShowRecommended(!showRecommended)}
                                                variant={showRecommended ? "default" : "outline"}
                                                size="sm"
                                                className="mt-2"
                                            >
                                                <TrendingUp className="h-4 w-4 mr-2" />
                                                {showRecommended ? 'Hi·ªán t·∫•t c·∫£' : 'Ch·ªâ g√≥i ph√π h·ª£p'}
                                            </Button>
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                        </div>
                    </section>
                ) : (
                    <section className="py-8 bg-gradient-to-r from-amber-50 to-orange-50">
                        <div className="container mx-auto px-4">
                            <Card className="max-w-4xl mx-auto border-amber-200 bg-amber-50/50">
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2 text-amber-800">
                                        <AlertCircle className="h-6 w-6" />
                                        Ch∆∞a c√≥ EduScore
                                    </CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <p className="mb-4">Ho√†n th√†nh ƒë√°nh gi√° EduScore ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c g·ª£i √Ω g√≥i vay ph√π h·ª£p v·ªõi h·ªì s∆° c·ªßa b·∫°n.</p>
                                    <Button asChild>
                                        <Link href="/eduscore">
                                            L√†m EduScore ngay
                                            <ArrowRight className="ml-2 h-4 w-4" />
                                        </Link>
                                    </Button>
                                </CardContent>
                            </Card>
                        </div>
                    </section>
                )}

                {/* Search and Filter Section */}
                <section className="py-8 bg-gray-50">
                    <div className="container mx-auto px-4">
                        <div className="max-w-6xl mx-auto">
                            <h2 className="text-2xl font-bold mb-6 text-center">T√¨m ki·∫øm g√≥i vay ph√π h·ª£p</h2>
                            
                            <Card className="p-6 mb-6">
                                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                                    <div className="relative">
                                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                                        <Input
                                            placeholder="T√¨m theo t√™n ng√¢n h√†ng..."
                                            className="pl-10"
                                            value={searchTerm}
                                            onChange={(e) => setSearchTerm(e.target.value)}
                                        />
                                    </div>
                                    
                                    <Select value={bankFilter} onValueChange={setBankFilter}>
                                        <SelectTrigger>
                                            <SelectValue placeholder="Ch·ªçn ng√¢n h√†ng" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="all">T·∫•t c·∫£ ng√¢n h√†ng</SelectItem>
                                            {Array.from(new Set(loanPackages.map(pkg => pkg.bank))).map(bank => (
                                                <SelectItem key={bank} value={bank}>{bank}</SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>

                                    <Select value={maxAmountFilter} onValueChange={setMaxAmountFilter}>
                                        <SelectTrigger>
                                            <SelectValue placeholder="S·ªë ti·ªÅn vay" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="all">T·∫•t c·∫£</SelectItem>
                                            <SelectItem value="under-200">D∆∞·ªõi 200 tri·ªáu</SelectItem>
                                            <SelectItem value="200-400">200-400 tri·ªáu</SelectItem>
                                            <SelectItem value="above-400">Tr√™n 400 tri·ªáu</SelectItem>
                                        </SelectContent>
                                    </Select>

                                    <Select value={interestRateFilter} onValueChange={setInterestRateFilter}>
                                        <SelectTrigger>
                                            <SelectValue placeholder="L√£i su·∫•t" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="all">T·∫•t c·∫£</SelectItem>
                                            <SelectItem value="under-7">D∆∞·ªõi 7%</SelectItem>
                                            <SelectItem value="7-8">7% - 8%</SelectItem>
                                            <SelectItem value="above-8">Tr√™n 8%</SelectItem>
                                        </SelectContent>
                                    </Select>
                                </div>
                            </Card>

                            {/* Results Summary */}
                            <div className="flex justify-between items-center mb-6">
                                <p className="text-muted-foreground">
                                    Hi·ªÉn th·ªã {filteredPackages.length} g√≥i vay
                                </p>
                                {eduscoreContext && (
                                    <Badge variant={showRecommended ? "default" : "outline"}>
                                        {showRecommended ? 'G·ª£i √Ω cho b·∫°n' : 'T·∫•t c·∫£ g√≥i vay'}
                                    </Badge>
                                )}
                            </div>

                            {/* Loan Packages Grid */}
                            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {filteredPackages.map(pkg => (
                                    <LoanPackageCard key={pkg.id} package={pkg} isRecommended={eduscoreContext && eduscoreContext.eduscore >= pkg.minEduscore} />
                                ))}
                            </div>

                            {filteredPackages.length === 0 && (
                                <Card className="p-12 text-center">
                                    <p className="text-muted-foreground mb-4">Kh√¥ng t√¨m th·∫•y g√≥i vay ph√π h·ª£p v·ªõi ti√™u ch√≠ c·ªßa b·∫°n</p>
                                    <Button onClick={() => {
                                        setSearchTerm("");
                                        setBankFilter("");
                                        setMaxAmountFilter("");
                                        setInterestRateFilter("");
                                        setShowRecommended(false);
                                    }}>
                                        X√≥a b·ªô l·ªçc
                                    </Button>
                                </Card>
                            )}
                        </div>
                    </div>
                </section>
            </main>
            <Footer />
        </div>
    );
}

function LoanPackageCard({ package: pkg, isRecommended }: { package: typeof loanPackages[0], isRecommended: boolean }) {
    return (
        <Card className={`h-full flex flex-col relative ${isRecommended ? 'border-green-300 shadow-lg' : ''}`}>
            {isRecommended && (
                <div className="absolute -top-2 -right-2 bg-green-500 text-white rounded-full p-2">
                    <Star className="h-4 w-4" />
                </div>
            )}
            
            <CardHeader className="pb-3">
                <div className="flex items-center justify-between mb-2">
                    <span className="text-2xl">{pkg.logo}</span>
                    <div className="flex items-center gap-1">
                        <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                        <span className="text-sm font-medium">{pkg.rating}</span>
                    </div>
                </div>
                <CardTitle className="text-lg">{pkg.bank}</CardTitle>
                <p className="text-sm font-medium text-blue-600">{pkg.package}</p>
            </CardHeader>

            <CardContent className="flex-grow space-y-3">
                <div className="grid grid-cols-2 gap-2 text-sm">
                    <div>
                        <span className="font-medium text-green-600">L√£i su·∫•t:</span>
                        <p className="text-xs">{pkg.interestRate}</p>
                    </div>
                    <div>
                        <span className="font-medium text-blue-600">S·ªë ti·ªÅn t·ªëi ƒëa:</span>
                        <p className="text-xs">{pkg.maxAmount}</p>
                    </div>
                    <div>
                        <span className="font-medium text-purple-600">Th·ªùi h·∫°n:</span>
                        <p className="text-xs">{pkg.term}</p>
                    </div>
                    <div>
                        <span className="font-medium text-orange-600">X·ª≠ l√Ω:</span>
                        <p className="text-xs">{pkg.processingTime}</p>
                    </div>
                </div>

                <div>
                    <span className="font-medium text-sm">∆Øu ƒëi·ªÉm:</span>
                    <ul className="text-xs text-muted-foreground mt-1 space-y-1">
                        {pkg.features.slice(0, 2).map((feature, index) => (
                            <li key={index} className="flex items-start gap-1">
                                <CheckCircle className="h-3 w-3 text-green-500 mt-0.5 flex-shrink-0" />
                                {feature}
                            </li>
                        ))}
                    </ul>
                </div>

                <div>
                    <span className="font-medium text-sm">Y√™u c·∫ßu:</span>
                    <ul className="text-xs text-muted-foreground mt-1 space-y-1">
                        {pkg.requirements.slice(0, 2).map((req, index) => (
                            <li key={index} className="flex items-start gap-1">
                                <div className="w-1 h-1 bg-gray-400 rounded-full mt-2 flex-shrink-0"></div>
                                {req}
                            </li>
                        ))}
                    </ul>
                </div>

                {isRecommended && (
                    <Badge className="bg-green-100 text-green-800 border-green-200">
                        Ph√π h·ª£p v·ªõi EduScore c·ªßa b·∫°n
                    </Badge>
                )}
            </CardContent>

            <CardFooter className="pt-3">
                <Button className="w-full" variant={isRecommended ? "default" : "outline"}>
                    T√¨m hi·ªÉu th√™m
                </Button>
            </CardFooter>
        </Card>
    );
}
